// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaeedNA.Data.Context;

namespace SaeedNA.Web.Migrations
{
    [DbContext(typeof(SaeedNAContext))]
    partial class SaeedNAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SaeedNA.Domain.Models.Email.Email", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmailEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmailId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("SaeedNA.Domain.Models.MService.MyService", b =>
                {
                    b.Property<int>("MyServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MyServiceText")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("MyServiceTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("MyServiceId");

                    b.ToTable("MyServices");

                    b.HasData(
                        new
                        {
                            MyServiceId = 101,
                            MyServiceText = "طراحی سایت طبق نیاز شما",
                            MyServiceTitle = "طراحی وب"
                        },
                        new
                        {
                            MyServiceId = 102,
                            MyServiceText = "طراحی اپلیکیشن موبایل برای انواع نیاز ها",
                            MyServiceTitle = "طراحی اپلیکیشن"
                        },
                        new
                        {
                            MyServiceId = 103,
                            MyServiceText = "طراحی انواع کارت ویزیت و تراکت",
                            MyServiceTitle = "طراحی گرافیکی"
                        },
                        new
                        {
                            MyServiceId = 104,
                            MyServiceText = "انجام پشتیبانی بر روی پروژه های شما",
                            MyServiceTitle = "پشتیبانی"
                        });
                });

            modelBuilder.Entity("SaeedNA.Domain.Models.MService.ServiceCounter", b =>
                {
                    b.Property<int>("ServiceCounterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServiceCounterCount")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("ServiceCounterTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("ServiceCounterId");

                    b.ToTable("ServiceCounters");

                    b.HasData(
                        new
                        {
                            ServiceCounterId = 101,
                            ServiceCounterCount = "80",
                            ServiceCounterTitle = "انجام شده"
                        },
                        new
                        {
                            ServiceCounterId = 102,
                            ServiceCounterCount = "850",
                            ServiceCounterTitle = "فنجان قهوه"
                        },
                        new
                        {
                            ServiceCounterId = 103,
                            ServiceCounterCount = "56",
                            ServiceCounterTitle = "مشتریان"
                        },
                        new
                        {
                            ServiceCounterId = 104,
                            ServiceCounterCount = "4000",
                            ServiceCounterTitle = "ساعت کد زدن"
                        });
                });

            modelBuilder.Entity("SaeedNA.Domain.Models.Resume.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HistoryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("HistoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("HistoryTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("HistoryWorkPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("HistoryId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("SaeedNA.Domain.Models.Resume.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SkillProgress")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("SkillTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillId = 101,
                            SkillProgress = "80",
                            SkillTitle = "C#"
                        },
                        new
                        {
                            SkillId = 102,
                            SkillProgress = "60",
                            SkillTitle = "ASP.Net Core"
                        },
                        new
                        {
                            SkillId = 103,
                            SkillProgress = "85",
                            SkillTitle = "Wordpress"
                        },
                        new
                        {
                            SkillId = 104,
                            SkillProgress = "90",
                            SkillTitle = "HTML, Css"
                        },
                        new
                        {
                            SkillId = 105,
                            SkillProgress = "80",
                            SkillTitle = "PhotoShop"
                        },
                        new
                        {
                            SkillId = 106,
                            SkillProgress = "60",
                            SkillTitle = "Seo"
                        });
                });

            modelBuilder.Entity("SaeedNA.Domain.Models.SPost.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SaeedNA.Domain.Models.SPost.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("PostCreateDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostShortDescription")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("PostTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("PostType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostVisit")
                        .HasColumnType("int");

                    b.Property<string>("ProjectAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectCustomer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SaeedNA.Domain.Models.Settings.SiteSettings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SettingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingId");

                    b.ToTable("SiteSettings");

                    b.HasData(
                        new
                        {
                            SettingId = 101,
                            SettingName = "SiteLogo",
                            SettingValue = "/uploads/img/favicon.ico"
                        },
                        new
                        {
                            SettingId = 102,
                            SettingName = "SiteFavIcon",
                            SettingValue = "/uploads/img/favicon.ico"
                        },
                        new
                        {
                            SettingId = 103,
                            SettingName = "SiteUrl",
                            SettingValue = "https://saeedna.ir/"
                        },
                        new
                        {
                            SettingId = 104,
                            SettingName = "SiteTitle",
                            SettingValue = "سایت شخصی سعید نوری"
                        },
                        new
                        {
                            SettingId = 105,
                            SettingName = "SiteMode",
                            SettingValue = "dark"
                        },
                        new
                        {
                            SettingId = 106,
                            SettingName = "SiteColor",
                            SettingValue = "blue"
                        },
                        new
                        {
                            SettingId = 107,
                            SettingName = "MetaTags",
                            SettingValue = "شخصی,سایت,رزومه,وردپرس,نوری,wordpress,طراحی"
                        },
                        new
                        {
                            SettingId = 108,
                            SettingName = "MetaDescription",
                            SettingValue = "سایت شخصی سعید نوری. انجام طراحی سایت و گرافیک"
                        },
                        new
                        {
                            SettingId = 109,
                            SettingName = "GoogleAnalytics",
                            SettingValue = ""
                        },
                        new
                        {
                            SettingId = 110,
                            SettingName = "MainMenu",
                            SettingValue = "true"
                        },
                        new
                        {
                            SettingId = 111,
                            SettingName = "PortfolioMenu",
                            SettingValue = "true"
                        },
                        new
                        {
                            SettingId = 112,
                            SettingName = "BlogMenu",
                            SettingValue = "true"
                        },
                        new
                        {
                            SettingId = 113,
                            SettingName = "ContactMeMenu",
                            SettingValue = "true"
                        },
                        new
                        {
                            SettingId = 114,
                            SettingName = "AboutMeMenu",
                            SettingValue = "true"
                        },
                        new
                        {
                            SettingId = 115,
                            SettingName = "FullName",
                            SettingValue = "سعید نوری"
                        },
                        new
                        {
                            SettingId = 116,
                            SettingName = "Birthday",
                            SettingValue = "1375/04/20"
                        },
                        new
                        {
                            SettingId = 117,
                            SettingName = "Mobile",
                            SettingValue = "09101650281"
                        },
                        new
                        {
                            SettingId = 118,
                            SettingName = "AboutMe",
                            SettingValue = "سایت شخصی سعید نوری"
                        },
                        new
                        {
                            SettingId = 119,
                            SettingName = "Slogans",
                            SettingValue = "سایت شخصی سعید نوری"
                        },
                        new
                        {
                            SettingId = 120,
                            SettingName = "ResumeImage",
                            SettingValue = "/uploads/img/2.jpg"
                        },
                        new
                        {
                            SettingId = 121,
                            SettingName = "AvatarImage",
                            SettingValue = "/uploads/img/img-mobile.jpg"
                        },
                        new
                        {
                            SettingId = 122,
                            SettingName = "ResumeFile",
                            SettingValue = "/uploads/img/resume.pdf"
                        },
                        new
                        {
                            SettingId = 123,
                            SettingName = "Address",
                            SettingValue = "ایران، تهران"
                        },
                        new
                        {
                            SettingId = 124,
                            SettingName = "PhoneNumber",
                            SettingValue = "09101650281"
                        },
                        new
                        {
                            SettingId = 125,
                            SettingName = "Email",
                            SettingValue = "i@saeedna.ir"
                        },
                        new
                        {
                            SettingId = 126,
                            SettingName = "Telegram",
                            SettingValue = "https://t.me/saeeddda_main"
                        },
                        new
                        {
                            SettingId = 127,
                            SettingName = "Instagram",
                            SettingValue = "https://instagram.com/saeeddda_main"
                        },
                        new
                        {
                            SettingId = 128,
                            SettingName = "Twitter",
                            SettingValue = "https://twitter.com/saeeddda"
                        },
                        new
                        {
                            SettingId = 129,
                            SettingName = "Facebook",
                            SettingValue = "#"
                        },
                        new
                        {
                            SettingId = 130,
                            SettingName = "Youtube",
                            SettingValue = "#"
                        },
                        new
                        {
                            SettingId = 131,
                            SettingName = "Linkedin",
                            SettingValue = "#"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaeedNA.Domain.Models.SPost.Post", b =>
                {
                    b.HasOne("SaeedNA.Domain.Models.SPost.Category", "Category")
                        .WithMany("Post")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
